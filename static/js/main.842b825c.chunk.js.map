{"version":3,"sources":["firebase/index.js","firebase/config.js","components/InputForm.jsx","components/Item.jsx","components/Waterlist.jsx","components/MyRoute.jsx","App.jsx","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","InputForm","getDataFromFirestore","useState","name","setName","comment","setComment","postDataToFirestore","collectionName","postData","a","firestore","collection","add","addedData","submitData","action","htmlFor","type","id","value","onChange","e","target","onClick","Item","index","myplace","deleteDataOnFirestore","documentId","doc","delete","key","data","Waterlist","props","swList","setList","useEffect","getList","pref","then","response","myPlace","setMyPlace","get","itemListArray","placeArray","docs","map","x","access","furigana","overview","latitude","longitude","MyRoute","getDataFromAPI","keyword","axios","result","console","log","App","to","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.842b825c.chunk.js","sourcesContent":["import firebase from 'firebase';\nimport { firebaseConfig } from './config';\n\nexport const firebaseApp = firebase.initializeApp(firebaseConfig);\n\nexport default firebase;","// Your web app's Firebase configuration\nexport const firebaseConfig = {\n    apiKey: \"AIzaSyD4G-QJmQ2dPadPqaXqzi54Hv9u-0yf_pA\",\n    authDomain: \"wakimizu-9104e.firebaseapp.com\",\n    databaseURL: \"https://wakimizu-9104e.firebaseio.com\",\n    projectId: \"wakimizu-9104e\",\n    storageBucket: \"wakimizu-9104e.appspot.com\",\n    messagingSenderId: \"867969198601\",\n    appId: \"1:867969198601:web:b1f84cd7b917f48fede6d8\"\n};\n","import React, { useState } from 'react';\nimport firebase from '../firebase';\n\nconst InputForm = ({ getDataFromFirestore }) => {\n    const [name, setName] = useState('');\n    const [comment, setComment] = useState('');\n    // Firestoreにデータを送信する\n    const postDataToFirestore = async (collectionName, postData) => {\n        const addedData = await firebase.firestore().collection(collectionName).add(postData);\n        return addedData;\n    }\n    //submitボタンのクリックイベント\n    const submitData = async () => {\n        if (name === '' || comment === '') {return false};\n        const postData = {\n            name: name,\n            comment: comment,\n        }\n        const addedData = await postDataToFirestore('myplace', postData);\n        setName('');\n        setComment('');\n        getDataFromFirestore();\n    }\n\n    return (\n        <form action=''>\n            <div>\n                <ol>\n                    <label htmlFor=\"name\">行った湧き水スポット　</label>\n                    <input\n                        type=\"text\"\n                        id=\"name\"\n                        value={name}\n                        onChange={e => setName(e.target.value)}\n                    />\n                </ol>\n                <ol>\n                    <label htmlFor=\"comment\">ひとことコメント　</label>\n                    <input\n                        type=\"text\"\n                        id=\"comment\"\n                        value={comment}\n                        onChange={e => setComment(e.target.value)}\n                    />\n                </ol>\n                <ol>\n                    <button\n                        type=\"button\"\n                        onClick={submitData}\n                    >submit</button>\n                </ol>\n            </div>\n        </form>\n    )\n}\nexport default InputForm;","import React from 'react';\nimport firebase from '../firebase';\n\nconst Item = ({ index, myplace, getDataFromFirestore }) => {\n    const deleteDataOnFirestore = async (collectionName, documentId) => {\n        const removedData = await firebase.firestore()\n            .collection(collectionName)\n            .doc(documentId)\n            .delete();\n        getDataFromFirestore();\n        return\n    }\n\n\n    return (\n        <li key={index} id={myplace.id}>\n            <div>\n                <p>湧き水の名前：{myplace.data.name}</p>\n                <p>コメント：{myplace.data.comment}</p>\n            </div>\n            <button\n                value={myplace.id}\n                onClick={e => deleteDataOnFirestore('myplace', myplace.id)}\n            >delete</button>\n        </li>\n    )\n}\nexport default Item;","import React, { useState, useEffect } from 'react';\nimport firebase from '../firebase';\nimport InputForm from './InputForm';\nimport Item from './Item';\n\nconst Waterlist = props => {\n    const [swList, setList] = useState(null);\n    useEffect(() => {\n        const result = props.getList?.(props.pref).then(response => setList(response));\n    }, [props])\n\n    const [myPlace, setMyPlace] = useState(null);\n    const getDataFromFirestore = async () => {\n        const itemListArray = await firebase.firestore().collection('myplace')\n        .get();\n        const placeArray = itemListArray.docs.map(x => {\n            return {\n                id: x.id,\n                data: x.data(),\n            }\n        })\n        setMyPlace(placeArray);\n        return placeArray;\n    }\n        useEffect(() => {\n            const result = getDataFromFirestore();\n        }, [props])\n\n    return (\n        <div>\n            <InputForm\n                getDataFromFirestore={getDataFromFirestore}\n            />\n            <ul>\n                {\n                    myPlace?.map((x, index) =>\n                        <Item\n                            key={index}\n                            myplace={x}\n                            index={index}\n                            getDataFromFirestore={getDataFromFirestore}\n                        />\n                    )\n                }\n            </ul>\n            <hr></hr>\n            <ul>\n                {\n                    swList === null\n                    ? <p>...Loading</p>\n                    : swList.data.data.map((x, index) =>\n                        <div key={index}>\n                            <h4>{x.access} {x.name}（{x.furigana}）</h4>\n                            <p>{x.overview}</p>\n                            <input type=\"hidden\" value={x.latitude}></input>\n                            <input type=\"hidden\" value={x.longitude}></input>\n                            <input type=\"hidden\" value={x.id}></input>\n                            {/* <button\n                                onClick={\n                                    e => postDataToFirestore('spring-water', todo)\n                                }\n                            ></button> */}\n                        </div>\n                    )\n                }\n            </ul>\n        </div>\n    );\n}\nexport default Waterlist;","import React, { useState, useEffect } from 'react';\nimport firebase from '../firebase';\nimport Item from './Item';\n\nconst MyRoute = props => {\n    const [myPlace, setMyPlace] = useState(null);\n\n    const getDataFromFirestore = async () => {\n        const itemListArray = await firebase.firestore().collection('myplace')\n        .get();\n        const placeArray = itemListArray.docs.map(x => {\n            return {\n                id: x.id,\n                data: x.data(),\n            }\n        })\n        setMyPlace(placeArray);\n        return placeArray;\n    }\n        useEffect(() => {\n            const result = getDataFromFirestore();\n        }, [props])\n\n    return (\n        <div>\n            <h3>行ったことある場所</h3>\n            <ul>\n                {\n                    myPlace?.map((x, index) =>\n                        <Item\n                            key={index}\n                            myplace={x}\n                            index={index}\n                            getDataFromFirestore={getDataFromFirestore}\n                        />\n                    )\n                }\n            </ul>\n        </div>\n    );\n}\nexport default MyRoute;","import React from 'react';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\nimport axios from 'axios';\nimport Waterlist from './components/Waterlist';\nimport MyRoute from './components/MyRoute';\n\nconst getDataFromAPI = async keyword => {\n  const url = 'https://livlog.xyz/springwater/springWater?q='\n  const result = await axios.get(`${url}${keyword}`);\n  return result;\n}\n\nconsole.log(getDataFromAPI('愛知県'));\n\nconst App = () => {\n  const pref = ['福岡県','熊本県','大分県','佐賀県','長崎県','宮崎県','鹿児島県'];\n\n  return (\n    <BrowserRouter>\n      <div>\n        <h1>九州の名水</h1>\n        <ul>\n          <li><Link to='/react-practice'>湧き水廻り</Link></li>\n          <li><Link to='/fukuoka'>福岡県</Link></li>\n          <li><Link to='/kumamoto'>熊本県</Link></li>\n          <li><Link to='/ooita'>大分県</Link></li>\n          <li><Link to='/saga'>佐賀県</Link></li>\n          <li><Link to='/nagasaki'>長崎県</Link></li>\n          <li><Link to='/miyazaki'>宮崎県</Link></li>\n          <li><Link to='/kagoshima'>鹿児島県</Link></li>\n          <li><Link to='/search'>search</Link></li>\n        </ul>\n        <hr />\n      </div>\n      <Route\n        path='/react-practice'\n        render={\n          props =>\n            <MyRoute />\n        }\n      />\n      <Route\n        path='/fukuoka'\n        render={\n          props =>\n            <Waterlist\n              pref={pref[0]}\n              getList={keyword => getDataFromAPI(keyword)}\n            />\n        }\n      />\n      <Route\n        path='/kumamoto'\n        render={\n          props =>\n            <Waterlist\n              pref={pref[1]}\n              getList={keyword => getDataFromAPI(keyword)}\n            />\n        }\n      />\n      <Route\n        path='/ooita'\n        render={\n          props =>\n            <Waterlist\n              pref={pref[2]}\n              getList={keyword => getDataFromAPI(keyword)}\n            />\n        }\n      />\n      <Route\n        path='/saga'\n        render={\n          props =>\n            <Waterlist\n              pref={pref[3]}\n              getList={keyword => getDataFromAPI(keyword)}\n            />\n        }\n      />\n      <Route\n        path='/nagasaki'\n        render={\n          props =>\n            <Waterlist\n              pref={pref[4]}\n              getList={keyword => getDataFromAPI(keyword)}\n            />\n        }\n      />\n      <Route\n        path='/miyazaki'\n        render={\n          props =>\n            <Waterlist\n              pref={pref[5]}\n              getList={keyword => getDataFromAPI(keyword)}\n            />\n        }\n      />\n      <Route\n        path='/kagoshima'\n        render={\n          props =>\n            <Waterlist\n              pref={pref[6]}\n              getList={keyword => getDataFromAPI(keyword)}\n            />\n        }\n      />\n      <Route\n        path='/nagasaki'\n        render={\n          props =>\n            <Waterlist\n              pref={pref[0]}\n              getList={keyword => getDataFromAPI(keyword)}\n            />\n        }\n      />\n    </BrowserRouter>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}